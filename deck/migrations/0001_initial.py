# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-07-24 09:35
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=100, unique=True, verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=12, verbose_name='Phone Number')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('theme', models.CharField(choices=[('blue', 'Blue (Default)'), ('red', 'Red'), ('pink', 'Pink'), ('purple', 'Purple'), ('deep-purple', 'Deep Purple'), ('indigo', 'Indigo'), ('light-blue', 'Light Blue'), ('cyan', 'Cyan'), ('teal', 'Teal'), ('green', 'Green'), ('light-green', 'Light Green'), ('lime', 'Lime'), ('orange', 'Orange'), ('deep-orange', 'Deep Orange'), ('brown', 'Brown'), ('blue-grey', 'Blue-Grey')], default='blue', help_text='The color of the website for this user', max_length=50)),
            ],
            options={
                'ordering': ['username'],
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('date_edited', models.DateTimeField(auto_now=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Deck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('in_play', models.BooleanField(default=False)),
                ('date_edited', models.DateTimeField(auto_now=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('card_displayed', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='deck.Card')),
                ('cards', models.ManyToManyField(blank=True, help_text='Cards in the deck', related_name='card_set', to='deck.Card')),
                ('cards_in_discard', models.ManyToManyField(blank=True, help_text='Cards in the discard pile', related_name='discard_set', to='deck.Card')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='deck.Deck')),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('open_draw', models.BooleanField(default=True, help_text='Allow anyone to draw a card')),
                ('secret', models.CharField(blank=True, help_text='Secret key to let someone in the room', max_length=50, null=True)),
                ('date_edited', models.DateTimeField(auto_now=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('deck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deck_played', to='deck.Deck')),
                ('deck_parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='original_deck', to='deck.Deck')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(blank=True, help_text='Users allowed in game room', related_name='player_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='decks',
            field=models.ManyToManyField(blank=True, help_text='Decks ths user has created', to='deck.Deck'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
